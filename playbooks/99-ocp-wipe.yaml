---
- hosts: hypervisor
  become: true
  tasks:
  - name: "verify libvirt network {{ ocp_vms_openshift_subdomain }}-private is active"
    shell: >
      virsh net-list --all | grep {{ ocp_vms_openshift_subdomain }}-private | awk '{print $2}'
    register: network_state
    tags:
    - network_state

  - name: "network_state {{ ocp_vms_openshift_subdomain }}-private debug - stdout"
    debug: var=network_state.stdout
    tags:
    - network_state

  - name: "activate libvirt network {{ ocp_vms_openshift_subdomain }}-private"
    shell: >
      virsh net-start {{ ocp_vms_openshift_subdomain }}-private
    when:
     - network_state.stdout == "inactive"
    tags:
    - network_state

  - name: start util vm
    virt:
      name: "{{ dns.clusterid }}.{{ util.name }}"
      state: running
    when:
      - ocp_vms_util_node

- hosts: util
  become: true
  gather_facts: no
  tasks:
  - name: Wait for connection...
    wait_for_connection:
      delay: 10
      timeout: 120
    when:
      - ocp_vms_util_node

- hosts: util
  become: true
  tasks:
  - name: "Deregister util node prior to deletion"
    import_role:
      name: devnullcake.redhat-subscription
    vars:
      redhat_subscription_state: absent
    register: deregister_result
    when:
      - ansible_distribution == 'RedHat'
      - ocp_vms_util_node

- hosts: hypervisor
  become: true
  tasks:
  - name: ansible-playbook pwd
    run_once: True
    set_fact:
      ansible_playbook_pwd: "{{ lookup('env', 'PWD') }}"
    failed_when: ansible_playbook_pwd == ''

  - name: stop utility vm
    virt:
      name: "{{ dns.clusterid }}.{{ util.name }}"
      state: destroyed

  - name: stop bootstrap vm
    virt:
      name: "{{ dns.clusterid }}.{{ item.name }}"
      state: destroyed
    with_items:
    - "{{ bootstrap }}"
    ignore_errors: yes

  - name: stop master vm(s)
    virt:
      name: "{{ dns.clusterid }}.{{ item.name }}"
      state: destroyed
    with_items:
    - "{{ masters }}"

  - name: stop infra vm(s)
    virt:
      name: "{{ dns.clusterid }}.{{ item.name }}"
      state: destroyed
    with_items:
    - "{{ infras }}"
    when: infras | length > 0

  - name: stop worker vm(s)
    virt:
      name: "{{ dns.clusterid }}.{{ item.name }}"
      state: destroyed
    with_items:
    - "{{ workers }}"

  - name: Create temporary file for utility image properties
    tempfile:
      state: file
      suffix: .temp
    register: utilpropstemp_1

  - name: Dump utility VM XML properties "{{ utilpropstemp_1 }}"
    shell: >
      virsh dumpxml {{ dns.clusterid }}.{{ util.name }} > {{ utilpropstemp_1.path }}
    tags:
      - ocp_vms_util_image_props

  - name: Query props file for utility VM disk devices
    xml:
      path: "{{ utilpropstemp_1.path }}"
      xpath: /domain/devices/disk/target
      content: attribute
    register: devices_xml_text
    tags:
      - ocp_vms_util_image_props

  - name: Remove props file "{{ utilpropstemp_1.path }}" using registered path var and file module
    file:
      path: "{{ utilpropstemp_1.path }}"
      state: absent
    when: utilpropstemp_1.path is defined

  - debug: msg="{{ dns.clusterid }}.{{ util.name }} device list ==> {{ devices_xml_text.matches | map(attribute='target.dev') | list }}"
    tags:
      - ocp_vms_util_image_props

  - debug: msg="{{ dns.clusterid }}.{{ util.name }} device ==> {{ item }}"
    with_items: "{{ devices_xml_text.matches | map(attribute='target.dev') | list }}"
    tags:
      - ocp_vms_util_image_props

  - name: start utility VM image path ini section
    shell: >
      echo "" >> /tmp/vm_img_path.ini;
      echo "[utility]" >> /tmp/vm_img_path.ini
    tags:
    - vm_image_path_dict

  - name: record utility VM image path
    shell: >
      imgpath=$(virsh domblklist {{ dns.clusterid }}.{{ util.name }} | grep {{ item }} | awk '{print $2}');
      echo "{{ util.name }}-{{ item }}.imgpath=$imgpath" >> /tmp/vm_img_path.ini;
      echo "" >> /tmp/vm_img_path.ini
    with_items: "{{ devices_xml_text.matches | map(attribute='target.dev') | list }}"
    tags:
    - vm_image_path_dict

  - name: record bootstrap VM image path
    shell: >
      imgpath=$(virsh domblklist {{ dns.clusterid }}.{{ item.name }} | grep {{ disk }} | awk '{print $2}');
      echo "[bootstrap]" >> /tmp/vm_img_path.ini;
      echo "{{ item.name }}.imgpath=$imgpath" >> /tmp/vm_img_path.ini
    with_items:
    - "{{ bootstrap }}"
    ignore_errors: yes
    tags:
    - vm_image_path_dict

  - name: start master VM image path ini section
    shell: >
      echo "" >> /tmp/vm_img_path.ini;
      echo "[masters]" >> /tmp/vm_img_path.ini
    tags:
    - vm_image_path_dict

  - name: record master VM image path
    shell: >
      imgpath=$(virsh domblklist {{ dns.clusterid }}.{{ item.name }} | grep {{ disk }} | awk '{print $2}');
      echo "{{ item.name }}.imgpath=$imgpath" >> /tmp/vm_img_path.ini
    with_items:
    - "{{ masters }}"
    tags:
    - vm_image_path_dict

  - name: start infra VM image path ini section
    shell: >
      echo "" >> /tmp/vm_img_path.ini;
      echo "[infras]" >> /tmp/vm_img_path.ini
    when: infras | length > 0
    tags:
    - vm_image_path_dict

  - name: record infra VM image path
    shell: >
      imgpath=$(virsh domblklist {{ dns.clusterid }}.{{ item.name }} | grep {{ disk }} | awk '{print $2}');
      echo "{{ item.name }}.imgpath=$imgpath" >> /tmp/vm_img_path.ini
    with_items:
    - "{{ infras }}"
    when: infras | length > 0
    tags:
    - vm_image_path_dict

  - name: start worker VM image path ini section
    shell: >
      echo "" >> /tmp/vm_img_path.ini;
      echo "[workers]" >> /tmp/vm_img_path.ini
    tags:
    - vm_image_path_dict

  - name: record worker VM image path
    shell: >
      imgpath=$(virsh domblklist {{ dns.clusterid }}.{{ item.name }} | grep {{ disk }} | awk '{print $2}');
      echo "{{ item.name }}.imgpath=$imgpath" >> /tmp/vm_img_path.ini
    with_items:
    - "{{ workers }}"
    tags:
    - vm_image_path_dict

  - name: Pause for 5 seconds
    pause:
      seconds: 5

  - name: undefine utility vm
    virt:
      name: "{{ dns.clusterid }}.{{ util.name }}"
      command: undefine

  - name: undefine bootstrap vm
    virt:
      name: "{{ dns.clusterid }}.{{ item.name }}"
      command: undefine
    with_items:
    - "{{ bootstrap }}"
    ignore_errors: yes

  - name: undefine master vm(s)
    virt:
      name: "{{ dns.clusterid }}.{{ item.name }}"
      command: undefine
    with_items:
    - "{{ masters }}"

  - name: undefine infra vm(s)
    virt:
      name: "{{ dns.clusterid }}.{{ item.name }}"
      command: undefine
    with_items:
    - "{{ infras }}"
    when: infras | length > 0

  - name: undefine worker vm(s)
    virt:
      name: "{{ dns.clusterid }}.{{ item.name }}"
      command: undefine
    with_items:
    - "{{ workers }}"

  - name: "Remove utility vm image file"
    vars:
      vm_image_path: "{{ lookup('ini', '{{ util.name }}-{{ item }}.imgpath section=utility file=/tmp/vm_img_path.ini') }}"
    shell: >
        virt-format -a {{ vm_image_path }};
        rm -f {{ vm_image_path }}
    with_items: "{{ devices_xml_text.matches | map(attribute='target.dev') | list }}"

  - name: "Remove bootstrap vm image file"
    vars:
      vm_image_path: "{{ lookup('ini', '{{ item.name }}.imgpath section=bootstrap file=/tmp/vm_img_path.ini') }}"
    shell: >
        virt-format -a {{ vm_image_path }};
        rm -f {{ vm_image_path }}
    with_items:
    - "{{ bootstrap }}"
    ignore_errors: yes

  - name: "Remove master vm image file(s)"
    vars:
      vm_image_path: "{{ lookup('ini', '{{ item.name }}.imgpath section=masters file=/tmp/vm_img_path.ini') }}"
    shell: >
        virt-format -a {{ vm_image_path }};
        rm -f {{ vm_image_path }}
    with_items:
    - "{{ masters }}"

  - name: "Remove infra vm image file(s)"
    vars:
      vm_image_path: "{{ lookup('ini', '{{ item.name }}.imgpath section=infras file=/tmp/vm_img_path.ini') }}"
    shell: >
        virt-format -a {{ vm_image_path }};
        rm -f {{ vm_image_path }}
    with_items:
    - "{{ infras }}"
    when: infras | length > 0

  - name: "Remove worker vm image file(s)"
    vars:
      vm_image_path: "{{ lookup('ini', '{{ item.name }}.imgpath section=workers file=/tmp/vm_img_path.ini') }}"
    shell: >
        virt-format -a {{ vm_image_path }};
        rm -f {{ vm_image_path }}
    with_items:
    - "{{ workers }}"

  - name: "Remove vm image backing file"
    vars:
      vm_image_path: "{{ util.vm_image_backing_file }}"
    shell: >
        virt-format -a {{ vm_image_path }};
        rm -f {{ vm_image_path }}

  - name: Remove libvirt network
    virt_net:
      name: "{{ ocp_vms_openshift_subdomain }}-private"
      state: "{{ item }}"
    with_items:
      - inactive
      - absent

  - name: Removing VM-specific deploy files
    file:
      path: "{{ item }}"
      state: absent
    with_items:
    - "{{ ansible_playbook_pwd }}/inventory/{{ ocp_vms_openshift_subdomain }}_vms"
    - "{{ playbook_dir }}/install-config.yaml.intermediate.j2"
    - "{{ ansible_playbook_pwd }}/inventory/group_vars/all/vars.yaml"
    - "{{ ansible_playbook_pwd }}/ocp4upi"
    - /tmp/vm_img_path.ini