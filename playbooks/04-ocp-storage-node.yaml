#vim: set ft=ansible:
---
- hosts: localhost
  gather_facts: false
  tasks:
  - name: ansible-playbook pwd
    run_once: True
    set_fact:
      ansible_playbook_pwd: "{{ lookup('env', 'PWD') }}"
    failed_when: ansible_playbook_pwd == ''

  - name: current local user
    run_once: True
    set_fact:
      ansible_local_user: "{{ lookup('pipe', 'id -un') | d(lookup('pipe', 'whoami'), True) | d(lookup('env', 'USER'), True) |  d(lookup('env', 'user'), True) |  d(lookup('env', 'LOGNAME'), True) }}"
    failed_when: ansible_local_user == ''

  - name: current local group
    run_once: True
    set_fact:
      ansible_local_group: "{{ lookup('pipe', 'id -gn') }}"
    failed_when: ansible_local_group == ''

- hosts: util
  gather_facts: true
  become: true
  tasks:
  - name: "Set ocp_vms_base_image_distro fact based on {{ util.name }} OS distro"
    set_fact:
      #ocp_vms_base_image_distro: "{{ util.ansible_distribution }}"
      ocp_vms_base_image_distro: "{{ hostvars[util.name]['ansible_facts']['distribution'] }}"
  - name: "debug"
    debug: var=ocp_vms_base_image_distro

- hosts: localhost
  gather_facts: false
  tasks:
  - name: Add Storage VM to in-memory inventory - RHEL/CentOS
    add_host:
      hostname: "{{ storage.ipaddr }}"
      host: "{{ storage.name }}"
      ansible_user: root
    when:
      #- ocp_vms_base_image_distro == 'RedHat' or ocp_vms_base_image_distro == 'CentOS'
      - hostvars[util.name]['ansible_facts']['distribution'] == 'RedHat' or hostvars[util.name]['ansible_facts']['distribution'] == 'CentOS'
    tags: storage_node_dns

  - name: Add Storage VM to in-memory inventory - Fedora
    add_host:
      hostname: "{{ storage.ipaddr }}"
      host: "{{ storage.name }}"
      ansible_user: root
      ansible_python_interpreter: /usr/bin/python3
    when:
      #- ocp_vms_base_image_distro == 'Fedora'
      - hostvars[util.name]['ansible_facts']['distribution'] == 'Fedora'
    tags: storage_node_dns

- hosts: hypervisor
  become: true
  tasks:
  - name: "Deploy Storage VM for OCP4 Solo Lab"
    import_role:
      name: ocp4-solo-vmprovision
      tasks_from: storage
    tags: deploy_storage_node

- hosts: util
  become: true
  tasks:
  - name: "Update master DNS db file for {{ storage.name }}.{{ ocp_vms_openshift_subdomain }}.{{ ocp_vms_openshift_rootdomain }}"
    blockinfile:
      path: /var/named/primary/master.{{ dns.domain }}.db
      marker: "; {mark} ANSIBLE MANAGED BLOCK {{ storage.name }}.{{ dns.clusterid }}.{{ dns.domain }}"
      insertafter: "^{{ util.name }}.{{ dns.clusterid }}"
      block: |
        {{ storage.name }}	IN	A	{{ storage.ipaddr }}
        {{ storage.name }}.{{ dns.clusterid }}	IN	A	{{ storage.ipaddr }}
      owner: named
      group: named
    tags: storage_node_dns

  - name: "Update reverse DNS db file for {{ storage.name }}.{{ ocp_vms_openshift_subdomain }}.{{ ocp_vms_openshift_rootdomain }}"
    blockinfile:
      path: /var/named/primary/reverse.{{ dns.domain }}.db
      marker: "; {mark} ANSIBLE MANAGED BLOCK {{ storage.name }}.{{ dns.clusterid }}.{{ dns.domain }}"
      insertbefore: '^;EOF'
      block: |
        {{ storage.ipaddr.split('.')[3] }}	IN	PTR	{{ storage.name }}.{{ dns.clusterid }}.{{ dns.domain }}.
      owner: named
      group: named
    tags: storage_node_dns

  - name: "Restart named"
    service:
      name: named
      state: restarted
    tags: storage_node_dns

- hosts: hypervisor
  become: true
  tasks:
  - name: Start Storage VM
    virt:
      name: "{{ dns.clusterid }}.{{ storage.name }}"
      state: running

  - name: Pause for 30 seconds to let VM startup
    pause:
      seconds: 30

- hosts: "*"
  become: true
  gather_facts: true
  tasks:
  - name: "Update Storage VM packages and add to local project inventory file - {{ dns.clusterid }}_vms"
    block:
    - name: Wait for connection...
      wait_for_connection:
        delay: 10
        timeout: 120

    - name: "RHN registration and repo enablement"
      import_role:
        name: devnullcake.redhat-subscription
      vars:
        redhat_subscription_enable_explicit_repos_only: "yes"
        redhat_subscription_disable_repos: []
        redhat_subscription_enable_repos:
          - rhel-7-server-rpms
          - rhel-7-server-extras-rpms
      register: registration_result
      failed_when: registration_result.rc != 0 and "This system is already registered" not in registration_result.stderr
      when:
        - ansible_distribution == 'RedHat'

    - name: Update all packages - RHEL/CentOS
      yum:
        name: '*'
        state: latest
      register: yumup_code
      when:
        - ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS'

    - name: Update all packages
      dnf:
        name: '*'
        state: latest
      register: dnfup_code
      when:
        - ansible_distribution == 'Fedora'

    - name: Reboot Storage VM after package updates...
      reboot:

    when:
      - ansible_hostname == storage.name

- hosts: localhost
  gather_facts: false
  tasks:
  - name: Add Storage VM inventory entry
    lineinfile:
      path: "{{ ansible_playbook_pwd }}/inventory/{{ dns.clusterid }}_vms"
      line: "{{ storage.name }} ansible_host={{ storage.ipaddr }} ansible_user=root{% if ansible_distribution == 'Fedora' %} ansible_python_interpreter=/usr/bin/python3{% endif %}"
      insertbefore: BOF
      mode: 0660
      owner: "{{ ansible_local_user }}"
      group: "{{ ansible_local_group }}"

# Included as a reference for debugging
- hosts: "*"
  tasks:
  - name: Display inventory related ansible vars 
    block:
    - debug: var=ansible_host
    - debug: var=inventory_hostname
    - debug: var=ansible_hostname
    #- debug: var=hostvars
    when:
      - ansible_hostname == storage.name
  tags: storage_node_dns
