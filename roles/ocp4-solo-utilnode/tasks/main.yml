---
# Setup OCP4 Util Node
- name: current local user
  run_once: True
  set_fact:
    ansible_local_user: "{{ lookup('pipe', 'id -un') | d(lookup('pipe', 'whoami'), True) | d(lookup('env', 'USER'), True) |  d(lookup('env', 'user'), True) |  d(lookup('env', 'LOGNAME'), True) }}"
  failed_when: ansible_local_user == ''
  tags:
    - local_user

- name: current local group
  run_once: True
  set_fact:
    ansible_local_group: "{{ lookup('pipe', 'id -gn') }}"
  failed_when: ansible_local_group == ''
  tags:
    - local_user

- name: current local user home
  run_once: True
  set_fact:
    ansible_local_home: "{{ lookup('env', 'HOME') }}"
  failed_when: ansible_local_home == ''
  tags:
    - local_user

- name: Package installation on RHEL/CentOS
  block:
    - name: Install base packages
      yum:
        name:
          - bind
          - bind-utils
          - haproxy
          - git
          - vim
          - bash-completion
          - NetworkManager
          - firewalld
          - podman
          - wget
        state: present
      tags:
        - util_pkgs

    - name: Install httpd
      yum:
        name:
          - httpd
        state: present
      when: not matchbox

    - name: Install packages for DHCP/PXE install - RHEL/CentOS7
      yum:
        name:
          - dhcp
          - syslinux
          - tftp-server
        state: present
      when: not staticips and ansible_distribution_major_version|int <= 7

    - name: Install packages for DHCP/PXE install - RHEL8
      yum:
        name:
          - dhcp-server
          - syslinux
          - tftp-server
        state: present
      when: not staticips and ansible_distribution_major_version|int >= 8

    - name: Set domain_can_mmap_files flag on and keep it persistent across reboots, required for dhcpd
      seboolean:
        name: domain_can_mmap_files
        state: yes
        persistent: yes
      when: not staticips and ansible_distribution_major_version|int >= 8

    - name: Install package for iPXE boot images
      yum:
        name:
          - ipxe-bootimgs
        state: present
      when: matchbox

    - name: Update all packages
      yum:
        name: '*'
        state: latest
      register: yumup_code
  when:
    - ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS'

- name: Package installations when utilizing RHEL7 and older
  yum:
    name:
      - libselinux-python
    state: present
  tags:
    - util_pkgs
  when:
    - (ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS') and ansible_distribution_major_version|int <= 7

- name: Package installation on Fedora
  block:
    - name: Install base packages
      dnf:
        name:
          - ansible
          - bind
          - bind-utils
          - haproxy
          - git
          - vim
          - bash-completion
          - NetworkManager
          - firewalld
          - python3-firewall
          - podman
          - wget
        state: present
      tags:
        - util_pkgs

    - name: Install httpd
      dnf:
        name:
          - httpd
        state: present
      when: not matchbox

    - name: Install packages for DHCP/PXE install
      dnf:
        name:
          - dhcp
          - syslinux
          - tftp-server
        state: present
      when: not staticips

    - name: Install package for iPXE boot images
      dnf:
        name:
          - ipxe-bootimgs
        state: present
      when: matchbox

    - name: Update all packages
      dnf:
        name: '*'
        state: latest
      register: dnfup_code
  when:
    - ansible_distribution == 'Fedora'

- name: Package installations when utilizing Fedora 30 and older
  dnf:
    name:
      - libselinux-python
    state: present
  tags:
    - util_pkgs
  when:
    - ansible_distribution == 'Fedora' and ansible_distribution_version|int <= 30

- name: Write out dhcp file
  template:
    src: dhcp/dhcpd.conf.j2
    dest: /etc/dhcp/dhcpd.conf
  when: not staticips
  tags:
  - dhcpd_conf

- name: Write out named conf file
  template:
    src: bind/named.conf.j2
    dest: /etc/named.conf

- name: Set zone serial number
  command: "date +%Y%m%d00"
  register: dymanicserialnumber

- name: Setting serial number as a fact
  set_fact:
    serialnumber: "{{ dymanicserialnumber.stdout }}"

- name: Create named primary zone and logging directories
  file:
    path: "{{ item }}"
    state: directory
    owner: named
    group: named
    mode: 0755
  with_items:
    - /var/log/named
    - /var/named/primary

- name: Write out "{{ dns.domain }}" zone file
  template:
    src: bind/zonefile.j2
    dest: /var/named/primary/master.{{ dns.domain }}.db
    owner: named
    group: named

- name: Write out reverse zone file
  template:
    src: bind/reverse.j2
    dest: /var/named/primary/reverse.{{ dns.domain }}.db
    owner: named
    group: named

- name: "Edit hosts file"
  lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="127.0.0.1 {{item}}" state=present
  with_items: "{{ util.name }}"
  tags:
    - util_hosts

- name: Write out haproxy config file
  template:
    src: haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg

- name: Implement network-online.service for haproxy service startup dependency
  copy:
    src: ../files/network-online.service
    dest: /etc/systemd/system/network-online.service

- name: Modify haproxy service to require network-online service
  lineinfile:
    path: /usr/lib/systemd/system/haproxy.service
    insertafter: '^Description='
    line: Requires=network-online.service

- name: Modify haproxy service to start after network-online service is ready
  lineinfile:
    path: /usr/lib/systemd/system/haproxy.service
    regexp: 'After=network.target'
    line: After=network-online.service
  tags:
  - haproxyservicecfg

- name: Reload systemctl daemon
  shell: "systemctl daemon-reload"

- name: Start and enable network-online service
  service:
    name: network-online.service
    state: started
    enabled: yes

- name: Best effort SELinux repair - Apache
  shell: "restorecon -vR /var/www/html || true"
  when: not matchbox

- name: Copy httpd conf file
  copy:
    src: ../files/httpd.conf
    dest: /etc/httpd/conf/httpd.conf
  when: not matchbox

- name: Create apache directories for installing
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - /var/www/html/install
    - /var/www/html/ignition
  when: not matchbox

- name: Get matchbox distribution
  get_url:
    url: https://github.com/poseidon/matchbox/releases/download/v0.8.3/matchbox-v0.8.3-linux-amd64.tar.gz
    dest: /tmp
    mode: '0440'
  register: getmatchresult
  until: getmatchresult is succeeded
  when: matchbox

- name: Extract matchbox distribution to /tmp
  unarchive:
    src: /tmp/matchbox-v0.8.3-linux-amd64.tar.gz
    dest: /tmp
    extra_opts:
    - --strip=1
    - --wildcards
    - '*/matchbox'
    - '*/contrib/systemd/matchbox-local.service'
    remote_src: True
  when: matchbox

- name: Copy matchbox binary
  copy:
    src: /tmp/matchbox
    dest: /usr/local/bin/matchbox
    mode: '0555'
    remote_src: True
  when: matchbox

- name: Installing matchbox Systemd unit file
  copy:
    src: /tmp/contrib/systemd/matchbox-local.service
    dest: /etc/systemd/system/matchbox.service
    mode: '0555'
    remote_src: True
  when: matchbox

- name: Create matchbox directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - /etc/matchbox
    - /var/lib/matchbox/assets
    - /var/lib/matchbox/groups
    - /var/lib/matchbox/ignition
    - /var/lib/matchbox/profiles
    - /var/lib/matchbox/install
  when: matchbox

- name: noodle for rhcos installer initramfs file - GA release
  script: "../bin/noodle {{ ocp_rhcos_artifacts_url }} installer-initramfs {{ ocp_vms_openshift_release }}"
  register: rhcosinitramfs
  retries: 4
  delay: 30
  until: rhcosinitramfs.rc == 0
  when: ocp_vms_openshift_prerelease is not defined
  tags:
    - noodlin

- name: Set rhcos installer initramfs file name as fact
  set_fact:
    rhcosinitramfsfile: "{{ rhcosinitramfs.stdout | trim }}"
  when: rhcosinitramfs.rc is defined and rhcosinitramfs.rc == 0
  tags:
    - noodlin

- name: noodle for rhcos installer initramfs file - pre-release
  script: "../bin/noodle {{ ocp_rhcos_prerelease_artifacts_url }} live-initramfs nightly"
  register: rhcosinitramfs
  retries: 4
  delay: 30
  until: rhcosinitramfs.rc == 0
  when: ocp_vms_openshift_prerelease is defined
  tags:
    - noodlin

- name: Set rhcos installer initramfs file name as fact
  set_fact:
    rhcosinitramfsfile: "{{ rhcosinitramfs.stdout | trim }}"
  when: rhcosinitramfs.rc is defined and rhcosinitramfs.rc == 0
  tags:
    - noodlin

- name: What is the rhcos installer initramfs file name?
  debug:
    var: rhcosinitramfsfile
  tags:
    - noodlin

- name: noodle for rhcos installer kernel file - GA release
  script: "../bin/noodle {{ ocp_rhcos_artifacts_url }} installer-kernel {{ ocp_vms_openshift_release }}"
  register: rhcoskernel
  retries: 4
  delay: 30
  until: rhcoskernel.rc == 0
  when: ocp_vms_openshift_prerelease is not defined
  tags:
    - noodlin

- name: Set rhcos installer kernel file name as fact
  set_fact:
    rhcoskernelfile: "{{ rhcoskernel.stdout | trim }}"
  when: rhcoskernel.rc is defined and rhcoskernel.rc == 0
  tags:
    - noodlin

- name: noodle for rhcos installer kernel file - pre-release
  script: "../bin/noodle {{ ocp_rhcos_prerelease_artifacts_url }} live-kernel nightly"
  register: rhcoskernel
  retries: 4
  delay: 30
  until: rhcoskernel.rc == 0
  when: ocp_vms_openshift_prerelease is defined
  tags:
    - noodlin

- name: Set rhcos installer kernel file name as fact
  set_fact:
    rhcoskernelfile: "{{ rhcoskernel.stdout | trim }}"
  when: rhcoskernel.rc is defined and rhcoskernel.rc == 0
  tags:
    - noodlin

- name: What is the rhcos installer kernel file name?
  debug: 
    var: rhcoskernelfile
  tags:
    - noodlin

- block:
  - name: noodle for rhcos metal bios file - RHOCP 4.2 and earlier
    script: "../bin/noodle {{ ocp_rhcos_artifacts_url }} metal-bios {{ ocp_vms_openshift_release }}"
    register: rhcosmetalbios
    retries: 4
    delay: 30
    until: rhcosmetalbios.rc == 0
  - name: Set rhcos metal bios file name as fact
    set_fact:
      rhcosmetalbiosfile: "{{ rhcosmetalbios.stdout | trim }}"
  when: ocp_vms_openshift_release is version('4.2', '<=')
  tags:
    - noodlin

- block:
  - name: noodle for rhcos metal file - RHOCP 4.3 and later
    script: "../bin/noodle {{ ocp_rhcos_artifacts_url }} metal {{ ocp_vms_openshift_release }}"
    register: rhcosmetalbios
    retries: 4
    delay: 30
    until: rhcosmetalbios.rc == 0
  - name: Set rhcos metal bios file name as fact
    set_fact:
      rhcosmetalbiosfile: "{{ rhcosmetalbios.stdout | trim }}"
  when: ocp_vms_openshift_release is version('4.3', '>=') and ocp_vms_openshift_release is version('5.0', '<')
  tags:
    - noodlin

- debug:
    msg: "./bin/noodle {{ ocp_rhcos_prerelease_artifacts_url }} metal\\\\. nightly"

- block:
  - name: noodle for rhcos metal file - pre-release
    script: "../bin/noodle {{ ocp_rhcos_prerelease_artifacts_url }} metal\\\\. nightly"
    register: rhcosmetalbios
    retries: 4
    delay: 30
    until: rhcosmetalbios.rc == 0
  - name: Set rhcos metal bios file name as fact
    set_fact:
      rhcosmetalbiosfile: "{{ rhcosmetalbios.stdout | trim }}"
  when: ocp_vms_openshift_prerelease is defined
  tags:
    - noodlin

- name: What is the rhcos metal bios file name?
  debug: 
    var: rhcosmetalbiosfile
  tags:
    - noodlin

- name: check if rhcos installer initramfs, kernel, and metal bios files are present
  stat: 
    path: /var/lib/matchbox/assets/{{ item }}
  loop:
    - "{{ rhcosinitramfsfile }}"
    - "{{ rhcoskernelfile }}"
    - "{{ rhcosmetalbiosfile }}"
# Since we are looping, rhcos_mb_assests is a dictionary, allowing indvidual .results
  register: rhcos_mb_assets
  tags:
    - rhcos_mb_asset_files

# Left in code as a means for studies on how selectattr( ) can be used with both Jinja ( equalto( ) ) and Ansible ( match( ) and search( ) ) tests.
# https://stackoverflow.com/questions/31895602/ansible-filter-a-list-by-its-attributes
- name: Print rhcos_mb_assets dict
  debug:
    msg: "Key is {{ item.key}} and value is {{item.value}}"
  with_dict: "{{ rhcos_mb_assets }}"
  tags:
    - rhcos_mb_asset_files

- name: What items are in the loop?
  debug:
    msg: "{{ item }}"
# selectattr('stat.exists', 'equalto', 'False') would not correctly select items, so went with a stat attribute that is undefined when not exists
  loop: "{{ rhcos_mb_assets.results | selectattr('stat.size', 'undefined') | map(attribute='item') | list }}"
  when: matchbox
  tags:
    - rhcos_mb_asset_files

- name: Download rhcos installer initramfs, kernel, and metal bios files for matchbox - GA release
  get_url:
    url: "{{ ocp_rhcos_artifacts_url }}{{ item }}"
    dest: /var/lib/matchbox/assets
    mode: '0440'
  loop: "{{ rhcos_mb_assets.results | selectattr('stat.size', 'undefined' ) | map(attribute='item') | list }}"
  when: matchbox and ocp_vms_openshift_prerelease is not defined
  tags:
    - rhcos_mb_asset_files

- name: Download rhcos installer initramfs, kernel, and metal bios files for matchbox - pre-release
  get_url:
    url: "{{ ocp_rhcos_prerelease_artifacts_url }}{{ item }}"
    dest: /var/lib/matchbox/assets
    mode: '0440'
  loop: "{{ rhcos_mb_assets.results | selectattr('stat.size', 'undefined' ) | map(attribute='item') | list }}"
  when: matchbox and ocp_vms_openshift_prerelease is defined
  tags:
    - rhcos_mb_asset_files

- name: Create matchbox profiles
  template:
    src: matchbox/profiles/{{ item }}.j2
    dest: /var/lib/matchbox/profiles/{{ item }}
    mode: 0555
  with_items:
    - bootstrap.json
    - infnod.json
    - master.json
    - cptnod.json
  when: matchbox

- name: Create matchbox group files - bootstrap
  template:
    src: matchbox/groups/bootstrap.json.j2
    dest: /var/lib/matchbox/groups/{{ item.name }}.json
    mode: 0555
  with_items:
    - "{{ bootstrap }}"
  when: matchbox

- name: Create matchbox group files - masters
  template:
    src: matchbox/groups/master.json.j2
    dest: /var/lib/matchbox/groups/{{ item.name }}.json
    mode: 0555
  with_items:
    - "{{ masters }}"
  when: matchbox

- name: Create matchbox group files - infrastructure nodes
  template:
    src: matchbox/groups/infnod.json.j2
    dest: /var/lib/matchbox/groups/{{ item.name }}.json
    mode: 0555
  with_items:
    - "{{ infras }}"
  when:
    - matchbox
    - infras is defined

- name: Create matchbox group files - workers
  template:
    src: matchbox/groups/cptnod.json.j2
    dest: /var/lib/matchbox/groups/{{ item.name }}.json
    mode: 0555
  with_items:
    - "{{ workers }}"
  when: matchbox

- name: Ensure group "matchbox" exists
  group:
    name: matchbox
    state: present
  when: matchbox

- name: create matchbox user
  user: name={{ item.name }} group={{ item.group }} shell={{ item.shell }} state=present
  with_items:
    - { name: 'matchbox', group: 'matchbox', shell: '/sbin/nologin' }
  when: matchbox

- name: Get OCP4 installer Bios
  get_url:
    url: "{{ ocp_rhcos_artifacts_url }}{{ rhcosmetalbiosfile }}"
    dest: /var/www/html/install/bios.raw.gz
    mode: 0555
  when: not matchbox

- name: Symlink bios.raw.gz when using matchbox
  file:
    src: /var/lib/matchbox/assets/{{ rhcosmetalbiosfile }}
    dest: /var/lib/matchbox/install/bios.raw.gz
    owner: root
    group: root
    state: link
    force: true
  when:
    - not staticips
    - matchbox

- name: Start service firewalld, if not started
  service:
    name: firewalld
    state: started
    enabled: yes

- name: Open up firewall ports
  firewalld:
    permanent: yes
    immediate: yes
    state: enabled
    port: "{{ item }}"
  with_items:
    - 67/udp
    - 53/tcp
    - 53/udp
    - 443/tcp
    - 80/tcp
    - 8080/tcp
    - 6443/tcp
    - 6443/udp
    - 22623/tcp
    - 22623/udp
    - 9000/tcp
    - 69/udp

- name: Best effort SELinux repair - DNS
  shell: "restorecon -vR /var/named || true"

- name: Best effort SELinux repair - Apache
  shell: "restorecon -vR /var/www/html || true"
  when: not matchbox

- name: Best effort SELinux repair - matchbox
  shell: "restorecon -vR /var/lib/matchbox || true"
  when: matchbox

- name: Create TFTP config
  file:
    path: /var/lib/tftpboot/pxelinux.cfg
    state: directory
    mode: 0755
  when: not staticips

- name: Create TFTP RHCOS dir
  file:
    path: /var/lib/tftpboot/rhcos
    state: directory
    mode: 0755
  when: not staticips

- name: Symlink kernel when using matchbox
  file:
    src: /var/lib/matchbox/assets/{{ rhcoskernelfile }}
    dest: /var/lib/tftpboot/rhcos/kernel
    owner: root
    group: root
    state: link
    force: true
  when:
    - not staticips
    - matchbox

- name: Symlink initramfs.img when using matchbox
  file:
    src: /var/lib/matchbox/assets/{{ rhcosinitramfsfile }}
    dest: /var/lib/tftpboot/rhcos/initramfs.img
    owner: root
    group: root
    state: link
    force: true
  when:
    - not staticips
    - matchbox

- name: Recursively change ownership of /var/lib/matchbox to matchbox.matchbox
  file:
    path: /var/lib/matchbox
    state: directory
    recurse: yes
    owner: matchbox
    group: matchbox

- name: SEBool allow haproxy connect any port
  seboolean:
    name: haproxy_connect_any
    state: yes
    persistent: yes

- name: Copy over files needed for TFTP
  shell: "cp -a /usr/share/syslinux/* /var/lib/tftpboot"
  when: not staticips

- name: Symlink undionly.kpxe when using matchbox
  file:
    src: /usr/share/ipxe/undionly.kpxe
    dest: /var/lib/tftpboot/undionly.kpxe
    owner: root
    group: root
    state: link
    force: true
  when:
    - not staticips
    - matchbox

- name: Get OCP4 installer initramfs
  get_url:
    url: "{{ ocp_rhcos_artifacts_url }}{{ rhcosinitramfsfile }}"
    dest: /var/lib/tftpboot/rhcos/initramfs.img
    mode: 0555
  when:
    - not staticips
    - not matchbox

- name: Get OCP4 installer kernel
  get_url:
    url: "{{ ocp_rhcos_artifacts_url }}{{ rhcoskernelfile }}"
    dest: /var/lib/tftpboot/rhcos/kernel
    mode: 0555
  when:
    - not staticips
    - not matchbox

- name: Set the default tftp file
  template:
    src: default.j2
    dest: /var/lib/tftpboot/pxelinux.cfg/default
    mode: 0555
  when: not staticips

- name: Installing TFTP Systemd util
  copy:
    src: start-tftp.sh
    dest: /usr/local/bin/start-tftp.sh
    mode: '0555'
  when: not staticips

- name: Installing TFTP Systemd unit file
  copy:
    src: util-tftp.service
    dest: /etc/systemd/system/util-tftp.service
    mode: '0655'
  when: not staticips

- name: Systemd daemon reload
  systemd:
    daemon_reload: yes
  when: not staticips

- name: Set the local resolv.conf file
  template:
    src: bind/resolv.conf.j2
    dest: /etc/resolv.conf

- name: "Starting {{ item }} service"
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - named
    - haproxy
    - httpd
    - NetworkManager
  when:
    - not matchbox

- name: "Starting {{ item }} service"
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - named
    - haproxy
    - matchbox
    - NetworkManager
  when:
    - matchbox

- name: Get network interface name
  shell: "nmcli con show --active | tail -1 | awk '{print $1}'"
  register: networkinterfacename

- name: Setting network interface name as a fact
  set_fact:
    networkifacename: "{{ networkinterfacename.stdout }}"

- name: Setting DNS server ip on network interface "{{ networkifacename }}" to 127.0.0.1
  command: "nmcli con mod {{ networkifacename }}  ipv4.dns 127.0.0.1"

- name: Setting DNS search path on network interface "{{ networkifacename }}" to "{{ dns.clusterid }}.{{ dns.domain }}"
  command: "nmcli con mod {{ networkifacename }}  ipv4.dns-search {{ dns.clusterid }}.{{ dns.domain }}"

- name: Restarting NetworkManager to effect changes
  service:
    name: "{{ item }}"
    state: restarted
  with_items:
    - NetworkManager

- name: Starting DHCP/PXE services
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - dhcpd
    - tftp
    - util-tftp
  when: not staticips

- name: Unmasking Services
  systemd:
    name: "{{ item }}"
    enabled: yes
    masked: no
  with_items:
    - tftp
  when: not staticips

- name: Create the oc4upi directory
  file:
    path: "{{ ansible_user_dir }}/ocp4upi"
    state: directory
    mode: 0700
  tags:
    - install_config

- name: Copy install-config.yaml to oc4upi directory
  copy:
    src: "../ocp4upi/install-config.yaml"
    dest: "{{ ansible_user_dir }}/ocp4upi/install-config.yaml"
    owner: root
    group: root
    mode: 0660
  tags:
    - install_config

- name: Include backup copy of install-config.yaml in oc4upi directory
  copy:
    src: "../ocp4upi/install-config.yaml"
    dest: "{{ ansible_user_dir }}/ocp4upi/install-config.yaml.bak"
    owner: root
    group: root
    mode: 0660
  tags:
    - install_config

- name: Copy info script over
  template:
    src: checker.sh.j2
    dest: /usr/local/bin/utilnodecheck
    owner: root
    group: root
    mode: 0555

- name: noodle for OC client tarball - GA release
  script: "../bin/noodle {{ ocp_clients_artifacts_url }} client-linux-{{ ocp_vms_openshift_release }} {{ ocp_vms_openshift_release }}"
  register: occlient
  retries: 4
  delay: 30
  until: occlient.rc == 0
  when: ocp_vms_openshift_prerelease is not defined
  tags:
    - noodlin

- name: Set OC client tarball file name as fact
  set_fact:
    occlientfile: "{{ occlient.stdout | trim }}"
  when: occlient.rc is defined and occlient.rc == 0
  tags:
    - noodlin

- name: noodle for OC client tarball - pre-release
  script: "../bin/noodle https://mirror.openshift.com/pub/openshift-v4/clients/ocp/candidate/ client-linux- rc"
  register: occlient
  retries: 4
  delay: 30
  until: occlient.rc == 0
  when: ocp_vms_openshift_prerelease is defined
  tags:
    - noodlin

- name: Set OC client tarball file name as fact
  set_fact:
    occlientfile: "{{ occlient.stdout | trim }}"
  when: occlient.rc is defined and occlient.rc == 0
  tags:
    - noodlin

- name: What is the OC client tarball file name?
  debug: 
    var: occlientfile
  tags:
    - noodlin

- name: noodle for OpenShift Installer tarball - GA release
  script: "../bin/noodle {{ ocp_clients_artifacts_url }} install-linux-{{ ocp_vms_openshift_release }} {{ ocp_vms_openshift_release }}"
  register: ospinstaller
  retries: 4
  delay: 30
  until: ospinstaller.rc == 0
  when: ocp_vms_openshift_prerelease is not defined
  tags:
    - noodlin

- name: Set OpenShift Installer tarball file name as fact
  set_fact:
    ospinstallerfile: "{{ ospinstaller.stdout | trim }}"
  when: ospinstaller.rc is defined and ospinstaller.rc == 0
  tags:
    - noodlin

- name: noodle for OpenShift Installer tarball - pre-release
  script: "../bin/noodle https://mirror.openshift.com/pub/openshift-v4/clients/ocp/candidate/ install-linux- rc"
  register: ospinstaller
  retries: 4
  delay: 30
  until: ospinstaller.rc == 0
  when: ocp_vms_openshift_prerelease is defined
  tags:
    - noodlin

- name: Set OpenShift Installer tarball file name as fact
  set_fact:
    ospinstallerfile: "{{ ospinstaller.stdout | trim }}"
  when: ospinstaller.rc is defined and ospinstaller.rc == 0
  tags:
    - noodlin

- name: What is the OpenShift Installer tarball file name?
  debug: 
    var: ospinstallerfile
  tags:
    - noodlin

- name: check if OC client tarball and/or OpenShift Installer tarball are present
  stat: 
    path: /usr/local/src/{{ item }}
  loop:
    - "{{ occlientfile }}"
    - "{{ ospinstallerfile }}"
  register: oc_client_assets
  tags:
    - oc_client_asset_files

- name: Download OC client tarball and/or OpenShift Installer tarball - GA release
  get_url:
    url: "{{ ocp_clients_artifacts_url }}{{ item }}"
    dest: /usr/local/src
    mode: '0440'
  loop: "{{ oc_client_assets.results | selectattr('stat.size', 'undefined' ) | map(attribute='item') | list }}"
  when: ocp_vms_openshift_prerelease is not defined
  tags:
    - oc_client_asset_files

- name: Download OC client tarball and/or OpenShift Installer tarball - pre-release
  get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/candidate/{{ item }}
    dest: /usr/local/src
    mode: '0440'
  loop: "{{ oc_client_assets.results | selectattr('stat.size', 'undefined' ) | map(attribute='item') | list }}"
  when: ocp_vms_openshift_prerelease is defined
  tags:
    - oc_client_asset_files

- name: check again if OC client tarball and/or OpenShift Installer tarball are present
  stat: 
    path: /usr/local/src/{{ item }}
  loop:
    - "{{ occlientfile }}"
    - "{{ ospinstallerfile }}"
  register: oc_client_assets2
  tags:
    - oc_client_asset_files

- name: Unarchiving tarballs
  unarchive:
    src: /usr/local/src/{{ item }}
    dest: /usr/local/bin
    remote_src: yes
  loop: "{{ oc_client_assets2.results | selectattr('stat.exists') | map(attribute='item') | list }}"

- name: Removing files that are not needed
  file:
    path: /usr/local/bin/README.md
    state: absent

- name: Downloading filetranspiler source
  git:
    repo: https://github.com/ashcrow/filetranspiler
    dest: /usr/local/src/filetranspiler
  when: ocp_util_filetranspiler

- name: Building filetranspiler
  shell: "podman build /usr/local/src/filetranspiler -t filetranspiler:latest"
  when: ocp_util_filetranspiler

- name: Installing filetranspiler
  copy:
    src: ../files/filetranspiler
    dest: /usr/local/bin/filetranspiler
    mode: 0555
  when: ocp_util_filetranspiler

- name: Place ocp-approve-pending-csrs utility
  copy:
    src: ../files/ocp-approve-pending-csrs.sh
    dest: /usr/local/bin/ocp-approve-pending-csrs.sh
    mode: '0755'
  tags:
    - install_csr_utility

- name: Download jq and place in /usr/local/bin
  get_url:
    url: https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
    dest: /usr/local/bin
    mode: 0777
    checksum: sha256:af986793a515d500ab2d35f8d2aecd656e764504b789b66d7e1a0b727a124c44
    group: root
    owner: root
  tags:
    - install_jq_utility

- name: Create symlink for jq --> jq-linux64
  file:
    src: /usr/local/bin/jq-linux64
    dest: /usr/local/bin/jq
    owner: root
    group: root
    state: link
    force: true
  tags:
    - install_jq_utility

- name: Install jp utility
  get_url:
    url: https://github.com/jmespath/jp/releases/download/0.1.3/jp-linux-amd64
    dest: /usr/local/bin/jp
    mode: '0755'
  tags:
    - install_jp_utility

- name: Install yq utility
  get_url:
    url: https://github.com/mikefarah/yq/releases/download/3.3.2/yq_linux_amd64
    dest: /usr/local/bin/yq
    mode: '0755'
  tags:
    - install_yq_utility

# Generate manifests, as we may need to modify prior to generating ignition configs in the future...
- name: Execute openshift-install to create manifests
  command: "openshift-install --dir={{ ansible_user_dir }}/ocp4upi create manifests"

- name: Ensure that Pods will not be scheduled on the control plane machine(s)
  lineinfile:
    path: "{{ ansible_user_dir }}/ocp4upi/manifests/cluster-scheduler-02-config.yml"
    regexp: '^  mastersSchedulable'
    line: '  mastersSchedulable: false'
  tags:
    - cluster_scheduler
  when: ocp_vms_openshift_release is version('4.2', '<=') or (ocp_vms_infra_count|int >= 1 and ocp_vms_worker_count|int >= 1) or (ocp_vms_infra_count|int >= 2 or ocp_vms_worker_count|int >= 2)

- name: Execute openshift-install to create ignition-configs
  command: "openshift-install --dir={{ ansible_user_dir }}/ocp4upi create ignition-configs"

- name: Pause for 5 seconds to ensure ignition-configs are available
  pause:
    seconds: 5

- name: Copy ignition configs into the matchbox ignition directory
  copy:
    src: "{{ ansible_user_dir }}/ocp4upi/{{ item }}"
    dest: /var/lib/matchbox/ignition/
    owner: matchbox
    group: matchbox
    mode: 0660
    remote_src: yes
  with_items:
    - bootstrap.ign
    - master.ign
    - worker.ign
  tags:
    - ignition_configs

- name: Create .kube directory
  file:
    path: "{{ ansible_user_dir }}/.kube"
    state: directory
    owner: root
    group: root
    mode: 0660

- name: Copy kubeconfig to .kube directory
  copy:
    src: "{{ ansible_user_dir }}/ocp4upi/auth/kubeconfig"
    dest: "{{ ansible_user_dir }}/.kube/config"
    owner: root
    group: root
    mode: 0660
    remote_src: yes

- name: Copy kubelet bootstrap certs yaml over
  copy:
    src: kubelet-bootstrap-cred-manager-ds.yaml
    dest: "{{ ansible_user_dir }}/kubelet-bootstrap-cred-manager-ds.yaml"

- name: Copy CSR approval Ansible playbook over
  copy:
    src: ocp-approve-csr.yaml
    dest: "{{ ansible_user_dir }}/ocp-approve-csr.yaml"

- name: restart haproxy service
  service:
    name: haproxy
    state: restarted

- name: Information about this install 
  vars: 
    msg: |
      "Next, execute:"
      "# ansible-playbook playbooks/03-ocp-init.yaml"
      "Once the playbook run is complete, ssh into the util vm and run:"
      "# /usr/local/bin/utilnodecheck"
      "...for installation status and details."
  debug: 
    msg: "{{ msg.split('\n') }}"       
  tags: debug_info
