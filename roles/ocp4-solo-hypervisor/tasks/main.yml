---
# Setup OCP4 Solo Lab Hypervisor Node

- name: Install base packages on Fedora
  dnf:
    name:
      - vim
      - bash-completion
      - podman
      - "@virtualization"
      - guestfs-browser
      - libguestfs-tools
      - python-libguestfs
      - virt-top
      - ksmtuned
      - python2-netaddr
      - python3-netaddr
      - libxml2
    state: present
  when:
      - ansible_distribution == 'Fedora'

- name: Install base packages on CentOS/RHEL 7
  yum:
    name:
      - vim
      - bash-completion
      - podman
      - "@virtualization-hypervisor"
      - "@virtualization-client"
      - "@virtualization-platform"
      - "@virtualization-tools"
      - iptables-services
      - libguestfs-tools
      - libguestfs-xfs
      - python-lxml
      - python-netaddr
      - libxml2
    state: present
  when:
      - (ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat') and ansible_distribution_major_version == '7'

- name: Install base packages on CentOS/RHEL 8
  yum:
    name:
      - vim
      - bash-completion
      - podman
      - "@virtualization-hypervisor"
      - "@virtualization-client"
      - "@virtualization-platform"
      - "@virtualization-tools"
      - iptables-services
      - libguestfs-tools
      - libguestfs-xfs
      - python3-lxml
      - python3-netaddr
    state: present
  when:
      - (ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat') and ansible_distribution_major_version == '8'

- name: Update all packages
  yum:
    name: '*'
    state: latest
  register: yumup_code
  when:
    - ansible_distribution == 'RedHat' or ansible_distribution == 'CentOS'

- block:
  - name: Configure libvirtd.conf - listen_tls = 0
    lineinfile:
      path: /etc/libvirt/libvirtd.conf
      regexp: 'listen_tls ='
      line: listen_tls = 0

  - name: Configure libvirtd.conf - listen_tcp = 1
    lineinfile:
      path: /etc/libvirt/libvirtd.conf
      regexp: 'listen_tcp ='
      line: listen_tcp = 1

  - name: Configure libvirtd.conf - auth_tcp="none"
    lineinfile:
      path: /etc/libvirt/libvirtd.conf
      regexp: 'auth_tcp='
      line: auth_tcp="none"

  - name: Configure libvirtd.conf - tcp_port = "16509"
    lineinfile:
      path: /etc/libvirt/libvirtd.conf
      regexp: 'tcp_port ='
      line: tcp_port = "16509"

  - name: Configure the service runner to pass --listen to libvirtd - Fedora
    lineinfile:
      path: /etc/sysconfig/libvirtd
      regexp: 'LIBVIRTD_ARGS='
      line: LIBVIRTD_ARGS="--listen"
    when:
      - ansible_distribution == 'Fedora'

  - name: "Starting {{ item }} service on CentOS/RHEL 8"
    service:
      name: "{{ item }}"
      enabled: yes
      state: started
    with_items:
      - firewalld
      - libvirtd
    when:
      - (ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat') and ansible_distribution_major_version == '8'

  - name: enable and start the libvirtd TCP socket - Fedora 31
    service:
      name: libvirtd-tcp.socket
      enabled: yes
      state: started
    when:
      - ansible_distribution == 'Fedora' and ansible_distribution_major_version == '31'

  - name: create firewalld rich rule, libvirt allowed from 10.88.0.0/16
    firewalld:
      rich_rule: rule family="ipv4" source address="10.88.0.0/16" service name="libvirt" accept
      permanent: yes
      state: enabled
    when:
      - ansible_distribution == 'Fedora'

  - name: Create private provisioning network xml definition
    template:
      src: virt-net-openshift-private.xml.j2
      dest: /tmp/virt-net-openshift-private.xml

  - name: Create private provisioning network
    virt_net:
      name: "{{ ocp_vms_openshift_subdomain }}-private"
      command: define
      xml: '{{ lookup("file", "/tmp/virt-net-openshift-private.xml") }}'

  - name: Set private provisioning network to start at system boot
    virt_net:
      name: "{{ ocp_vms_openshift_subdomain }}-private"
      autostart: yes

  - name: "Add private provisioning network bridge {{ ocp_vms_openshift_subdomain }}-private to firewalld dmz zone" 
    firewalld:
      zone: dmz
      interface: "{{ ocp_vms_openshift_subdomain }}-br"
      permanent: yes
      state: enabled
    when:
      - ansible_distribution == 'Fedora'

  - name: "Add tt0 interface to firewalld dmz zone" 
    firewalld:
      zone: dmz
      interface: tt0 
      permanent: yes
      state: enabled
    when:
      - ansible_distribution == 'Fedora'

  - name: allow traffic on the libvirt port
    firewalld:
      zone: dmz
      service: libvirt
      permanent: yes
      state: enabled
    when:
      - ansible_distribution == 'Fedora'

  - name: allow traffic on the libvirt port
    firewalld:
      zone: libvirt
      service: libvirt
      permanent: yes
      state: enabled
    when:
      - ansible_distribution == 'RedHat' and ansible_distribution_major_version == '8'

  when:
    - ocp_vms_libvirt_integration

- name: "Starting {{ item }} service"
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - libvirtd
    - ksm
    - ksmtuned

- name: Install libselinux-python package - CentOS/RHEL 7
  yum:
    name:
      - libselinux-python
  when:
      - (ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat') and ansible_distribution_major_version == '7'

- name: Install libselinux-python package - CentOS/RHEL 8
  yum:
    name:
      - python3-libselinux
  when:
      - (ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat') and ansible_distribution_major_version == '8'
